{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","components/CounterButton.js","components/Header.js","containers/App.js","actions.js","constants.js","registerServiceWorker.js","reducers.js","index.js"],"names":["Card","_ref","id","email","name","console","log","react_default","a","createElement","className","src","concat","alt","CardList","robots","map","robot","components_Card","key","SearchBox","searchChange","aria-label","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","CounterButton","updateCount","prevState","count","nextProps","nextState","color","onClick","Header","components_CounterButton","App","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","toLowerCase","includes","components_Header","components_SearchBox","components_Scroll","components_ErrorBoundary","components_CardList","React","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunk","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"4RAaeA,EAXF,SAAAC,GAAwB,IAAtBC,EAAsBD,EAAtBC,GAAIC,EAAkBF,EAAlBE,MAAOC,EAAWH,EAAXG,KAExB,OADAC,QAAQC,IAAI,QAEVC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uDACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAG,wBAAAC,OAA0BV,EAA1B,iBAA6CW,IAAI,UACzDN,EAAAC,EAAAC,cAAA,UAAKL,GACLG,EAAAC,EAAAC,cAAA,SAAIN,KCgBKW,EApBE,SAAAb,GAAc,IAAZc,EAAYd,EAAZc,OAEjB,OADAV,QAAQC,IAAI,aAEVC,EAAAC,EAAAC,cAAA,WAEIM,EAAOC,IAAI,SAACC,GACV,OACEV,EAAAC,EAAAC,cAACS,EAAD,CACEC,IAAKF,EAAMf,GACXA,GAAIe,EAAMf,GACVE,KAAMa,EAAMb,KACZD,MAAOc,EAAMd,YCEZiB,EAfG,SAAAnB,GAAoB,IAAlBoB,EAAkBpB,EAAlBoB,aACpB,OAEEd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,SACEa,aAAW,gBACXZ,UAAU,mCACVa,KAAK,SACLC,YAAY,gBACZC,SAAUJ,MCDDK,EARA,SAAAC,GACb,OACEpB,EAAAC,EAAAC,cAAA,OAAKmB,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAClEJ,EAAMK,WCmBEC,cArBb,SAAAA,EAAYN,GAAO,IAAAO,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMV,KACDc,MAAQ,CACXC,UAAU,GAHKR,iFAODS,EAAOC,GACvBP,KAAKQ,SAAS,CACZH,UAAU,qCAKZ,OAAIL,KAAKI,MAAMC,SACNnC,EAAAC,EAAAC,cAAA,gFAEF4B,KAAKV,MAAMK,gBAlBMc,aCkCbC,qBAjCb,SAAAA,IAAc,IAAAb,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAU,IACZb,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAY,GAAAP,KAAAH,QAcFW,YAAc,WACZd,EAAKW,SAAS,SAAAI,GACZ,MAAO,CACLC,MAAOD,EAAUC,MAAQ,MAhB7BhB,EAAKO,MAAQ,CACXS,MAAO,GAHGhB,qFAOQiB,EAAWC,GAE/B,OAAIf,KAAKI,MAAMS,QAAUE,EAAUF,uCAgBnC,OADA7C,QAAQC,IAAI,iBAEVC,EAAAC,EAAAC,cAAA,UAAQa,aAAW,iBAAiB+B,MAAOhB,KAAKV,MAAM0B,MAAOC,QAASjB,KAAKW,aAA3E,UACUX,KAAKI,MAAMS,cA5BCJ,cCiBbS,gMAfSJ,EAAWC,GAC/B,OAAO,mCAKP,OADA/C,QAAQC,IAAI,UAEVC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,wBAAd,eACAH,EAAAC,EAAAC,cAAC+C,EAAD,CAAeH,MAAO,gBAVTP,aC6BfW,8LA4BFpB,KAAKV,MAAM+B,mDAYJ,IAAAC,EAEoDtB,KAAKV,MAAxDiC,EAFDD,EAECC,YAAaC,EAFdF,EAEcE,eAAgB9C,EAF9B4C,EAE8B5C,OAAQ+C,EAFtCH,EAEsCG,UAGvCC,EAAiBhD,EAAOiD,OAAO,SAAA/C,GACnC,OAAOA,EAAMb,KAAK6D,cAAcC,SAASN,EAAYK,iBAGvD,OAAIH,EACKvD,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oBAAd,WAGLH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAC0D,EAAD,MACA5D,EAAAC,EAAAC,cAAC2D,EAAD,CAAW/C,aAAcwC,IACzBtD,EAAAC,EAAAC,cAAC4D,EAAD,KACE9D,EAAAC,EAAAC,cAAC6D,EAAD,KACE/D,EAAAC,EAAAC,cAAC8D,EAAD,CAAUxD,OAAQgD,cA1DdS,IAAM1B,WAqET2B,cAxFS,SAAAhC,GACtB,MAAO,CAELmB,YAAanB,EAAMiC,aAAad,YAChC7C,OAAQ0B,EAAMkC,cAAc5D,OAC5B+C,UAAWrB,EAAMkC,cAAcb,UAC/BnB,MAAOF,EAAMkC,cAAchC,QAKJ,SAAAiC,GACzB,MAAO,CACLf,eAAgB,SAAAgB,GAAK,OAAID,ECjBU,CACrCrD,KCViC,sBDWjCuD,QDemDD,EAAME,OAAOC,SAE9DtB,gBAAiB,kBAAMkB,ECbI,SAAAA,GAC7BA,EAAS,CAAErD,KCdyB,2BDepC0D,MAAM,8CACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAI,OAAIT,EAAS,CAAErD,KChBS,yBDgBsBuD,QAASO,MAChEC,MAAM,SAAA3C,GAAK,OAAIiC,EAAS,CAAErD,KChBM,wBDgBuBuD,QAASnC,WDiFtD8B,CAA6ChB,GG3FtD8B,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTZ,KAAK,SAAAgB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB3D,QACfsD,UAAUC,cAAcO,WAK1BlG,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBgF,MAAM,SAAA3C,GACLtC,QAAQsC,MAAM,4CAA6CA,KCvEjE,IAAM6D,EAAqB,CACzB5C,YAAa,IAaT6C,EAAqB,CACzB3C,WAAW,EACX/C,OAAQ,GACR4B,MAAO,ICXH+D,SAASC,0BAETC,EAAcC,YAAgB,CAAEnC,aDJV,WAA6C,IAA5CjC,EAA4CqE,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAApCN,EAAoBS,EAAgBH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAP,GAChE,OAAQG,EAAO1F,MACb,IFd+B,sBEgB7B,OAAOY,OAAO+E,OAAO,GAAIzE,EAAO,CAAEmB,YAAaqD,EAAOnC,UACxD,QACE,OAAOrC,ICFuCkC,cDYvB,WAA6C,IAA5ClC,EAA4CqE,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAApCL,EAAoBQ,EAAgBH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAP,GACjE,OAAQG,EAAO1F,MACb,IF5BkC,yBE6BhC,OAAOY,OAAO+E,OAAO,GAAIzE,EAAO,CAAEqB,WAAW,IAC/C,IF7BkC,yBE8BhC,OAAO3B,OAAO+E,OAAO,GAAIzE,EAAO,CAAE1B,OAAQkG,EAAOnC,QAAShB,WAAW,IACvE,IF9BiC,wBE+B/B,OAAO3B,OAAO+E,OAAO,GAAIzE,EAAO,CAAEE,MAAOsE,EAAOnC,QAAShB,WAAW,IACtE,QACE,OAAOrB,MCpBP0E,EAAQC,YAAYR,EAAaS,YAAgBC,IAAOZ,IAE9Da,IAASC,OAAOjH,EAAAC,EAAAC,cAACgH,EAAA,EAAD,CAAUN,MAAOA,GACf5G,EAAAC,EAAAC,cAACiH,EAAD,OAEFC,SAASC,eAAe,SFFzB,WACb,GAA6C,kBAAmB7B,UAAW,CAGzE,GADkB,IAAI8B,IAAIC,cAAwBrC,OAAOC,UAC3CqC,SAAWtC,OAAOC,SAASqC,OAIvC,OAGFtC,OAAOuC,iBAAiB,OAAQ,WAC9B,IAAMlC,EAAK,GAAAlF,OAAMkH,cAAN,sBAEPvC,GAiDV,SAAiCO,GAE/Bb,MAAMa,GACHZ,KAAK,SAAAC,GAGkB,MAApBA,EAAS8C,SACuD,IAAhE9C,EAAS+C,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7CrC,UAAUC,cAAcqC,MAAMnD,KAAK,SAAAgB,GACjCA,EAAaoC,aAAapD,KAAK,WAC7BO,OAAOC,SAAS6C,aAKpB1C,EAAgBC,KAGnBR,MAAM,WACLjF,QAAQC,IACN,mEArEAkI,CAAwB1C,GAIxBC,UAAUC,cAAcqC,MAAMnD,KAAK,WACjC7E,QAAQC,IACN,+GAMJuF,EAAgBC,MEzBxB2C","file":"static/js/main.d4fdfff8.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({id, email, name }) => {\r\n  console.log('Card')\r\n  return (\r\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n      <img src={`https://robohash.org/${id}?size=250x200`} alt=\"Robot\"/>\r\n      <h2>{name}</h2>\r\n      <p>{email}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n// destructurin robots property from props, robots = props.robots\r\nconst CardList = ({robots}) => {\r\n  console.log('Card list')\r\n  return (\r\n    <div>\r\n      {\r\n        robots.map((robot) => {\r\n          return (\r\n            <Card \r\n              key={robot.id} \r\n              id={robot.id} \r\n              name={robot.name} \r\n              email={robot.email}\r\n            />\r\n          );\r\n        })\r\n      }\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\nreturn (\r\n  // every time input changes run searchChange function passed from App parent component\r\n  <div className=\"pa2\">\r\n    <input \r\n      aria-label='search robots'\r\n      className=\"pa3 ba b--green bg-lightest-blue\" \r\n      type=\"search\" \r\n      placeholder=\"search robots\" \r\n      onChange={searchChange}\r\n    />\r\n  </div>\r\n);\r\n};\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = props => {\r\n  return (\r\n    <div style={{overflowY: 'scroll', border: '3px solid black', height: '600px'}}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false\r\n    }\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({\r\n      hasError: true\r\n    })\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>Ooops. There is a problem with this action. Please try again later</h1>;\r\n    }\r\n    return this.props.children;\r\n  }\r\n};\r\n\r\nexport default ErrorBoundary;","import React, { Component } from 'react';\r\n\r\nclass CounterButton extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      count: 0\r\n    }\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    // re-render only if count has changed (we can also use PureComponent which assures that component will update only when its props has changed, but it checks shallow copy of props, so deep objects etc can not be compared)\r\n    if (this.state.count !== nextState.count) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  updateCount = () => {\r\n    this.setState(prevState => {\r\n      return {\r\n        count: prevState.count + 1\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    console.log('CounterButton')\r\n    return (\r\n      <button aria-label='Increase count' color={this.props.color} onClick={this.updateCount}>\r\n        Count: {this.state.count}\r\n      </button>\r\n    )\r\n  }\r\n}\r\n\r\nexport default CounterButton;","import React, { Component } from 'react';\r\nimport CounterButton from './CounterButton';\r\n\r\nclass Header extends Component {\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    return false;\r\n  }\r\n\r\n  render() {\r\n    console.log('Header')\r\n    return (\r\n      <div>\r\n        <h1 className=\"f-subheadline-l f1-m\">RoboFriends</h1>\r\n        <CounterButton color={'red'}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n// or import React, {Component} from 'react', and then Component instead of React.Component\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport { connect } from 'react-redux';\r\nimport './App.css';\r\nimport { setSearchField, reqRobots } from '../actions';\r\nimport Header from '../components/Header';\r\n\r\n// we inform App that it will receive searchField prop from the searchRobots reducer\r\n// mapStateToProps tells what part of state it has to listen for and send down as a prop\r\nconst mapStateToProps = state => {\r\n  return {\r\n    // because we have one reducer we just take it from state.searchField instead of state.searchRobots.searchField (like would be in case we we had multiple reducers), edit: now we have multiple reducers\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error\r\n  }\r\n};\r\n// dispatch is used to send actions to reducer, so we are returning an object that contains all of our actions\r\n// mapDispatchToProps says what props are the actions that need to get dispatched\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onSearchChange: event => dispatch(setSearchField(event.target.value)),\r\n    // here because we are returning a function in dispatch, not an object like above, thunk middleware will be triggered and recognize it as an async function this way and inject dispatch function to the reqRobots so it can use it\r\n    onRequestRobots: () => dispatch(reqRobots())\r\n  }\r\n}\r\n\r\nclass App extends React.Component {\r\n  // built-in constructor method\r\n  // constructor() {\r\n  //   super();\r\n  //   // state describes app and can change, allows communicate and pass dynamic data between components\r\n  //   // usually parent component passes state as props to pure/dumb children components\r\n  //   this.state = {\r\n  //     // robots: []\r\n  //     // searchfield: ''\r\n  //   }\r\n  // }\r\n  // edit: we dont need cosntructor, we dont have state here, we use props from redux store\r\n\r\n  // after running 'constructor' and 'render' initial dom react runs componentDidMount, where I fetch data for robots and then render again after changing state\r\n  componentDidMount() {\r\n  //   console.log(this.props.store);\r\n  //  fetch('https://jsonplaceholder.typicode.com/users')\r\n  //   .then(response => {\r\n  //     if (response.ok) {\r\n  //       return response.json();\r\n  //     }\r\n  //     throw new Error('Request failed!');\r\n  //   }, networkError => console.log(networkError.message))\r\n  //   .then(users => {\r\n  //     this.setState({\r\n  //       robots: users\r\n  //     });\r\n  //   });\r\n    this.props.onRequestRobots();\r\n  }\r\n\r\n  // my own method for App comontent\r\n  // I'm using arrow function instead of class method syntax (onSearchChange(){}) to avoid 'this' pointing to input during execution, arrow functions inherit 'this' from lexical scope they're defined in, don't have own 'this'\r\n  // onSearchChange = (event) => {\r\n  //   // we have to use seState method to change the state\r\n  //   this.setState({searchfield: event.target.value});\r\n  // }\r\n  // edit redux: we don't need this method now because we get it from redux as a prop\r\n\r\n  // built-in React render method\r\n  render() {\r\n    // const {robots} = this.state;\r\n    const { searchField, onSearchChange, robots, isPending } = this.props;\r\n    // edit redux: we don't need searchfield from this.state anymore, we get it from redux as a prop, also we are using now onSearchChange instead of this.onSearchChange method\r\n    // filter array, if robot name includes text from searchfield add it to new array\r\n    const filteredRobots = robots.filter(robot => {\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    }); \r\n    // if (robots.length === 0) {\r\n    if (isPending) {\r\n      return <h1 className=\"f-subheadline tc\">LOADING</h1>\r\n    } else {\r\n      return (\r\n        <div className=\"tc mw9-l center\">\r\n          <Header/>\r\n          <SearchBox searchChange={onSearchChange}/>\r\n          <Scroll>\r\n            <ErrorBoundary>\r\n              <CardList robots={filteredRobots}/>\r\n            </ErrorBoundary>\r\n          </Scroll>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n \r\n};\r\n\r\n// Connecting App with certain part of the state(mapStateToProps) and certain actions(mapDispatchToProps), and gives them as the props to the App\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n } from './constants';\r\n// actions are objects which we are returning to the reducer, usually we store type in separate constants file and import it as above\r\n// payload is  common name for data that we send with that action\r\n\r\nexport const setSearchField = text => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text\r\n});\r\n\r\n// async action below, we using higher order function to return other function, \r\nexport const reqRobots = () => dispatch => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n  fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS , payload: data}))\r\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n};","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { \r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n } from './constants';\r\n // --- sync Reducer for searching Robots ---\r\n// initial state for our first reducer, just like we have this.state in App.js in constructor()\r\nconst initialStateSearch = {\r\n  searchField: ''\r\n}\r\n// Our reducer function takes state and action, if there is action to perform he changes state accordingly\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      // we don't modify\r\n      return Object.assign({}, state, { searchField: action.payload });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst initialStateRobots = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: ''\r\n}\r\n// --- async Reducer for requesting Robots with fetch ---\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => { \r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({}, state, { isPending: true });\r\n    case REQUEST_ROBOTS_SUCCESS: \r\n      return Object.assign({}, state, { robots: action.payload, isPending: false });\r\n    case REQUEST_ROBOTS_FAILED: \r\n      return Object.assign({}, state, { error: action.payload, isPending: false });\r\n    default:\r\n      return state;\r\n  }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { createLogger } from 'redux-logger'\r\n// redux thunk is middleware for async actions\r\nimport thunk from 'redux-thunk';\r\nimport './index.css';\r\nimport App from './containers/App'\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport { searchRobots, requestRobots } from './reducers';\r\nimport 'tachyons';\r\n\r\n// create logger middleware to help monitor our app with logging info about actions\r\nconst logger = createLogger();\r\n// combining all reducer into one rootReducer to connect to the store\r\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\r\nconst store = createStore(rootReducer, applyMiddleware(thunk, logger));\r\n\r\nReactDOM.render(<Provider store={store}>\r\n                  <App/>\r\n                </Provider>, \r\n                document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}